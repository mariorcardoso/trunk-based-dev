name: Pull Request

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  lint:
    needs: build
    runs-on: ubuntu-latest

    outputs:
      commit_message: ${{ steps.set-commit.outputs.commit_message }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Lint JavaScript files
        run: npm run lint

      - name: Get the commit message using GitHub API
        id: get-commit
        run: |
          COMMIT_MESSAGE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/commits" | \
          jq '.[-1].commit.message' -r)
          echo "Last commit message: $COMMIT_MESSAGE"
          echo "::set-output name=commit_message::$COMMIT_MESSAGE"

      - name: Set the commit message output
        id: set-commit
        run: echo "::set-output name=commit_message::${{ steps.get-commit.outputs.commit_message }}"

  deploy_staging:
    needs: [test, lint]
    runs-on: ubuntu-latest
    environment: staging

    if: contains(needs.lint.outputs.commit_message, 'PREVIEW')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging
        uses: netlify/actions/cli@master
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        with:
          args: deploy --prod --dir .
